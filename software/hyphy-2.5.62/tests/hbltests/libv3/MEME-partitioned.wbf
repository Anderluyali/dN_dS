GetString (version, HYPHY_VERSION, 0);


if (+version >= 2.4) {
    LoadFunctionLibrary ("SelectionAnalyses/MEME.bf", {"--code" : "Universal", "--alignment" : PATH_TO_CURRENT_BF + "data/CD2.nex", "--branches" : "GROUP1"});
} else {
    LoadFunctionLibrary ("SelectionAnalyses/MEME.bf", {"0" : "Universal", "1" : PATH_TO_CURRENT_BF + "data/CD2.nex", "2" : "GROUP1", "3" : "0.1"});

}

LoadFunctionLibrary ("shared.bf");
LoadFunctionLibrary ("libv3/IOFunctions.bf");

/*
fscanf ("data/CD2.nex.MEME.json","Raw",json);
*/

//meme.json = Eval (json);



assert (check_value (
    ((meme.json["fits"])["Global MG94xREV"])["Log Likelihood"], -3466.57, 0.001), "Incorrect log-likelihood for the Global MG94xREV model");
    

p_values   = (((meme.json["MLE"])["content"])["0"])[-1][6];
lrts       = (((meme.json["MLE"])["content"])["0"])[-1][5];
branches   = (((meme.json["MLE"])["content"])["0"])[-1][7];

/*
|   Codon    | Partition  |   alpha    |   beta+    |     p+     |    LRT     |Episodic selection detected?| # branches |
|:----------:|:----------:|:----------:|:----------:|:----------:|:----------:|:--------------------------:|:----------:|
|     34     |     1      |    0.000   |   66.537   |    0.537   |    6.513   |      Yes, p =  0.0173      |     1      |
|     98     |     1      |    0.000   |   14.195   |    1.000   |    5.032   |      Yes, p =  0.0371      |     0      |
|    142     |     1      |    0.557   |  114.702   |    0.456   |    5.158   |      Yes, p =  0.0348      |     1      |
|    175     |     1      |    0.000   |   11.489   |    1.000   |    3.611   |      Yes, p =  0.0775      |     1      |


*/


test.lrt_sum = 0;
test.branch_sum = 0;

test.expected_positives = utility.MatrixToDict({{34,98,142,175}});

function confirm_site (site, p, dict, kind) {
    if (p <= 0.1) {
        if (dict/(site+1)) {
            test.lrt_sum += lrts[site];
            test.branch_sum += branches[site];
            dict - (site+1);
            return TRUE;
        } else {
            assert (0, "Failed to correctly classify site " + (site+1));
        }
     }
    if (dict/(site+1)) {
        assert (0, "Incorrectly classified site " + (site+1));
    }
    return FALSE;
}

for (_index_,_p_; in; p_values) {
    confirm_site (_index_, _p_, test.expected_positives, 1);
}

//assert (check_value (
//    test.lrt_sum, 20.33, 0.05), "More than 5% difference in cumulative LRT for positively selected sites");
assert (check_value (
    test.branch_sum, 3, 0.0001), "Incorrect total # of branches with high EBF");
    
