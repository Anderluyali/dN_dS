GetString (version, HYPHY_VERSION, 0);

if (+version >= 2.4) {
    LoadFunctionLibrary ("SelectionAnalyses/aBSREL.bf", {"--code" : "Universal", "--alignment" : PATH_TO_CURRENT_BF + "data/ncov.fasta", "--multiple-hits" : "Double", "--branches": "Internal"});
} else {
    return TRUE;
}
LoadFunctionLibrary ("shared.bf");


assert (check_value (
    ((absrel.json["fits"])["Full adaptive model"])["Log Likelihood"], -12245.95, 0.001), "Incorrect log-likelihood for the full adaptive model");

assert (check_value (
    ((absrel.json["test results"])["positive test results"]),1, 0.001), "Incorrect number of positive test results");

assert (check_value (
    ((absrel.json["test results"])["tested"]),2, 0.001), "Incorrect number of total tests");
    


test.expected_positives = utility.MatrixToDict({{"Node2"}});
test.lrts = 0;
test.delta = 0;

function confirm_branch (branch, p, dict) {
    if (p == None) {
        p = 1;
    }
    if (p <= 0.05) {
        if (dict/branch) {
            dict - branch;
            return TRUE;
        } else {
            assert (0, "Failed to correctly classify branch " + branch);
        }
    }
    if (dict/branch) {
        assert (0, "Incorrectly classified branch " + branch);
    }
    return false;
}

utility.ForEachPair ((absrel.json["branch attributes"])["0"],"_key_", "_value_",
                 "  
                    if (confirm_branch (_key_, _value_['Corrected P-value'], test.expected_positives)) {
                    test.lrts  += _value_['LRT'];
                    test.delta += _value_[terms.parameters.multiple_hit_rate];
                   }
                ");
                


