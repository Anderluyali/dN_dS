GetString (version, HYPHY_VERSION, 0);

if (+version >= 2.4) {
    LoadFunctionLibrary ("SelectionAnalyses/aBSREL.bf", {"--code" : "Universal", "--alignment" : PATH_TO_CURRENT_BF + "data/CD2.nex", "--branches" : "Internal"});
} else {
    LoadFunctionLibrary ("SelectionAnalyses/aBSREL.bf", {"0" : "Universal", "1" : PATH_TO_CURRENT_BF + "data/CD2.nex", "2" : "Internal", "3" : "Yes", "4" : "0.1"});

}
LoadFunctionLibrary ("shared.bf");

assert (check_value (
    ((absrel.json["fits"])["Full adaptive model"])["Log Likelihood"], -3415.02, 0.001), "Incorrect log-likelihood for the full adaptive model");

assert (check_value (
    ((absrel.json["test results"])["positive test results"]),2, 0.001), "Incorrect number of positive test results");

assert (check_value (
    ((absrel.json["test results"])["tested"]),6, 0.001), "Incorrect number of total tests");



test.expected_positives = utility.MatrixToDict({{"Node2","Node8"}});
test.lrts = 0;

function confirm_branch (branch, p, dict) {

    if (p == None) {
        p = 1;
    }
    if (p <= 0.05) {
        if (dict/branch) {
            dict - branch;
            return TRUE;
        } else {
            assert (0, "Failed to correctly classify branch " + branch);
        }
    }
    if (dict/branch) {
        assert (0, "Incorrectly classified branch " + branch);
    }
    return false;
}

for (_key_, _value_; in; (absrel.json["branch attributes"])["0"]) {
  if (_value_/'Corrected P-value') {
    if (confirm_branch (_key_, _value_['Corrected P-value'], test.expected_positives)) {
      test.lrts  += _value_['LRT'];
    }
  }
}
assert (check_value (
    test.lrts, 15.67, 0.05), "More than 5% difference in cumulative LRT for positively selected sites");
